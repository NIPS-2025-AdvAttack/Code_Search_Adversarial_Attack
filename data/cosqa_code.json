{
    "d20105": "def _process_and_sort(s, force_ascii, full_process=True):\n    ts = utils.full_process(s, force_ascii=force_ascii) if full_process else s\n    tokens = ts.split()\n    sorted_string = u\" \".join(sorted(tokens))\n    return sorted_string.strip()",
    "d20106": "def is_readable(filename):\n    return os.path.isfile(filename) and os.access(filename, os.R_OK)",
    "d20107": "def empty(self, name, **kwargs):\n        return self._write_op(self._empty_nosync, name, **kwargs)",
    "d20108": "def is_iterable_but_not_string(obj):\n    return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)",
    "d20109": "def print_runs(query):\n    if query is None:\n        return\n    for tup in query:\n        print((\"{0} @ {1} - {2} id: {3} group: {4}\".format(\n            tup.end, tup.experiment_name, tup.project_name,\n            tup.experiment_group, tup.run_group)))",
    "d20110": "def write_fits(self, fitsfile):\n        tab = self.create_table()\n        hdu_data = fits.table_to_hdu(tab)\n        hdus = [fits.PrimaryHDU(), hdu_data]\n        fits_utils.write_hdus(hdus, fitsfile)",
    "d20111": "def page_align_content_length(length):\n    mod = length % _PAGEBLOB_BOUNDARY\n    if mod != 0:\n        return length + (_PAGEBLOB_BOUNDARY - mod)\n    return length",
    "d20112": "def as_float_array(a):\n    return np.asarray(a, dtype=np.quaternion).view((np.double, 4))",
    "d20113": "def __replace_all(repls: dict, input: str) -> str:\n    return re.sub('|'.join(re.escape(key) for key in repls.keys()),\n                  lambda k: repls[k.group(0)], input)",
    "d20114": "def is_iterable_of_int(l):\n    r\"\"\" Checks if l is iterable and contains only integral types \"\"\"\n    if not is_iterable(l):\n        return False\n    return all(is_int(value) for value in l)",
    "d20115": "def save(variable, filename):\n    fileObj = open(filename, 'wb')\n    pickle.dump(variable, fileObj)\n    fileObj.close()",
    "d20116": "def stop_at(iterable, idx):\n    for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item",
    "d20117": "def token(name):\n    def wrap(f):\n        tokenizers.append((name, f))\n        return f\n    return wrap",
    "d20118": "def assert_or_raise(stmt: bool, exception: Exception,\n                    *exception_args, **exception_kwargs) -> None:\n  if not stmt:\n    raise exception(*exception_args, **exception_kwargs)",
    "d20119": "def _return_comma_list(self, l):\n        if isinstance(l, (text_type, int)):\n            return l\n        if not isinstance(l, list):\n            raise TypeError(l, ' should be a list of integers, \\\nnot {0}'.format(type(l)))\n        str_ids = ','.join(str(i) for i in l)\n        return str_ids",
    "d20120": "def asynchronous(function, event):\n    thread = Thread(target=synchronous, args=(function, event))\n    thread.daemon = True\n    thread.start()",
    "d20121": "def time2seconds(t):\n    return t.hour * 3600 + t.minute * 60 + t.second + float(t.microsecond) / 1e6",
    "d20122": "def _to_numeric(val):\n    if isinstance(val, (int, float, datetime.datetime, datetime.timedelta)):\n        return val\n    return float(val)",
    "d20123": "def datetime_to_ms(dt):\n    seconds = calendar.timegm(dt.utctimetuple())\n    return seconds * 1000 + int(dt.microsecond / 1000)",
    "d20124": "def get_readline_tail(self, n=10):\n        end = self.shell.readline.get_current_history_length() + 1\n        start = max(end-n, 1)\n        ghi = self.shell.readline.get_history_item\n        return [ghi(x) for x in range(start, end)]",
    "d20125": "def get_table_columns(dbconn, tablename):\n    cur = dbconn.cursor()\n    cur.execute(\"PRAGMA table_info('%s');\" % tablename)\n    info = cur.fetchall()\n    cols = [(i[1], i[2]) for i in info]\n    return cols",
    "d20126": "def url_host(url: str) -> str:\n    from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''",
    "d20127": "def flatten_multidict(multidict):\n    return dict([(key, value if len(value) > 1 else value[0])\n                 for (key, value) in multidict.iterlists()])",
    "d20128": "def _session_set(self, key, value):\n        self.session[self._session_key(key)] = value",
    "d20129": "def to_dotfile(G: nx.DiGraph, filename: str):\n    A = to_agraph(G)\n    A.write(filename)",
    "d20130": "def rmfile(path):\n    if osp.isfile(path):\n        if is_win:\n            os.chmod(path, 0o777)\n        os.remove(path)",
    "d20131": "def add_suffix(fullname, suffix):\n    name, ext = os.path.splitext(fullname)\n    return name + '_' + suffix + ext",
    "d20132": "def is_iterable_but_not_string(obj):\n    return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)",
    "d20133": "def askopenfilename(**kwargs):\n    try:\n        from Tkinter import Tk\n        import tkFileDialog as filedialog\n    except ImportError:\n        from tkinter import Tk, filedialog\n    root = Tk()\n    root.withdraw()\n    root.update()\n    filenames = filedialog.askopenfilename(**kwargs)\n    root.destroy()\n    return filenames",
    "d20134": "def _pad(self):\n    if self._indent:\n      self.whitespace(self._indent * len(self._open_elements))",
    "d20135": "def compute_centroid(points):\n    lats = [p[1] for p in points]\n    lons = [p[0] for p in points]\n    return Point(np.mean(lats), np.mean(lons), None)",
    "d20136": "def cfloat32_array_to_numpy(cptr, length):\n    if isinstance(cptr, ctypes.POINTER(ctypes.c_float)):\n        return np.fromiter(cptr, dtype=np.float32, count=length)\n    else:\n        raise RuntimeError('Expected float pointer')",
    "d20137": "def paragraph(separator='\\n\\n', wrap_start='', wrap_end='',\n              html=False, sentences_quantity=3):\n    return paragraphs(quantity=1, separator=separator, wrap_start=wrap_start,\n                      wrap_end=wrap_end, html=html,\n                      sentences_quantity=sentences_quantity)",
    "d20138": "def delete(self, endpoint: str, **kwargs) -> dict:\n        return self._request('DELETE', endpoint, **kwargs)",
    "d20139": "def replace_month_abbr_with_num(date_str, lang=DEFAULT_DATE_LANG):\n    num, abbr = get_month_from_date_str(date_str, lang)\n    return re.sub(abbr, str(num), date_str, flags=re.IGNORECASE)",
    "d20140": "def is_integer(obj):\n    if PYTHON3:\n        return isinstance(obj, int)\n    return isinstance(obj, (int, long))",
    "d20141": "def _validate(data, schema, ac_schema_safe=True, **options):\n    try:\n        jsonschema.validate(data, schema, **options)\n    except (jsonschema.ValidationError, jsonschema.SchemaError,\n            Exception) as exc:\n        if ac_schema_safe:\n            return (False, str(exc))\n        raise\n    return (True, '')",
    "d20142": "def access_token(self):\n        access_token = self.session.get(self.access_token_key)\n        if access_token:\n            if not self.expires_at:\n                return access_token\n            timestamp = time.time()\n            if self.expires_at - timestamp > 60:\n                return access_token\n        self.fetch_access_token()\n        return self.session.get(self.access_token_key)",
    "d20143": "def str2int(num, radix=10, alphabet=BASE85):\n    return NumConv(radix, alphabet).str2int(num)",
    "d20144": "def drag_and_drop(self, droppable):\n        self.scroll_to()\n        ActionChains(self.parent.driver).drag_and_drop(self._element, droppable._element).perform()",
    "d20145": "def unique_list(lst):\n    uniq = []\n    for item in lst:\n        if item not in uniq:\n            uniq.append(item)\n    return uniq",
    "d20146": "def check_git():\n    try:\n        with open(os.devnull, \"wb\") as devnull:\n            subprocess.check_call([\"git\", \"--version\"], stdout=devnull, stderr=devnull)\n    except:\n        raise RuntimeError(\"Please make sure git is installed and on your path.\")",
    "d20147": "def prt_nts(data_nts, prtfmt=None, prt=sys.stdout, nt_fields=None, **kws):\n    prt_txt(prt, data_nts, prtfmt, nt_fields, **kws)",
    "d20148": "def task_property_present_predicate(service, task, prop):\n    try:\n        response = get_service_task(service, task)\n    except Exception as e:\n        pass\n    return (response is not None) and (prop in response)",
    "d20149": "def count_list(the_list):\n    count = the_list.count\n    result = [(item, count(item)) for item in set(the_list)]\n    result.sort()\n    return result",
    "d20150": "def get_randomized_guid_sample(self, item_count):\n        dataset = self.get_whitelist()\n        random.shuffle(dataset)\n        return dataset[:item_count]",
    "d20151": "def _kbhit_unix() -> bool:\n    dr, dw, de = select.select([sys.stdin], [], [], 0)\n    return dr != []",
    "d20152": "def set_scrollregion(self, event=None):\n        self.canvas.configure(scrollregion=self.canvas.bbox('all'))",
    "d20153": "def print_fatal_results(results, level=0):\n    print_level(logger.critical, _RED + \"[X] Fatal Error: %s\", level, results.error)",
    "d20154": "def safe_format(s, **kwargs):\n  return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))",
    "d20155": "def url_host(url: str) -> str:\n    from urllib.parse import urlparse\n    res = urlparse(url)\n    return res.netloc.split(':')[0] if res.netloc else ''",
    "d20156": "def asMaskedArray(self):\n        return ma.masked_array(data=self.data, mask=self.mask, fill_value=self.fill_value)",
    "d20157": "def closeEvent(self, e):\n        self.emit('close_widget')\n        super(DockWidget, self).closeEvent(e)",
    "d20158": "def csv_to_numpy(string_like, dtype=None):\n    stream = StringIO(string_like)\n    return np.genfromtxt(stream, dtype=dtype, delimiter=',')",
    "d20159": "def to_bytes(data: Any) -> bytearray:\n    if isinstance(data, int):\n        return bytearray([data])\n    return bytearray(data, encoding='latin-1')",
    "d20160": "def loads(s, model=None, parser=None):\n    with StringIO(s) as f:\n        return load(f, model=model, parser=parser)",
    "d20161": "def get_groups(self, username):\n        username = ldap.filter.escape_filter_chars(self._byte_p2(username))\n        userdn = self._get_user(username, NO_ATTR)\n        searchfilter = self.group_filter_tmpl % {\n            'userdn': userdn,\n            'username': username\n        }\n        groups = self._search(searchfilter, NO_ATTR, self.groupdn)\n        ret = []\n        for entry in groups:\n            ret.append(self._uni(entry[0]))\n        return ret",
    "d20162": "def is_unicode(string):\n    str_type = str(type(string))\n    if str_type.find('str') > 0 or str_type.find('unicode') > 0:\n        return True\n    return False",
    "d20163": "def caller_locals():\n    import inspect\n    frame = inspect.currentframe()\n    try:\n        return frame.f_back.f_back.f_locals\n    finally:\n        del frame",
    "d20164": "def _get_loggers():\n    from .. import loader\n    modules = loader.get_package_modules('logger')\n    return list(loader.get_plugins(modules, [_Logger]))",
    "d20165": "def _cnx_is_empty(in_file):\n    with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True",
    "d20166": "def EvalGaussianPdf(x, mu, sigma):\n    return scipy.stats.norm.pdf(x, mu, sigma)",
    "d20167": "def GetAllPixelColors(self) -> ctypes.Array:\n        return self.GetPixelColorsOfRect(0, 0, self.Width, self.Height)",
    "d20168": "def _rescale_array(self, array, scale, zero):\n        if scale != 1.0:\n            sval = numpy.array(scale, dtype=array.dtype)\n            array *= sval\n        if zero != 0.0:\n            zval = numpy.array(zero, dtype=array.dtype)\n            array += zval",
    "d20169": "def upcaseTokens(s,l,t):\n    return [ tt.upper() for tt in map(_ustr,t) ]",
    "d20170": "def build(self, **kwargs):\n        self.lexer = ply.lex.lex(object=self, **kwargs)",
    "d20171": "def _get_file_sha1(file):\n    bits = file.read()\n    file.seek(0)\n    h = hashlib.new('sha1', bits).hexdigest()\n    return h",
    "d20172": "def set_trace():\n    pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)",
    "d20173": "def factorial(n, mod=None):\n    if not (isinstance(n, int) and n >= 0):\n        raise ValueError(\"'n' must be a non-negative integer.\")\n    if mod is not None and not (isinstance(mod, int) and mod > 0):\n        raise ValueError(\"'mod' must be a positive integer\")\n    result = 1\n    if n == 0:\n        return 1\n    for i in range(2, n+1):\n        result *= i\n        if mod:\n            result %= mod\n    return result",
    "d20174": "def get_last_row(dbconn, tablename, n=1, uuid=None):\n    return fetch(dbconn, tablename, n, uuid, end=True)",
    "d20175": "def lower_ext(abspath):\n    fname, ext = os.path.splitext(abspath)\n    return fname + ext.lower()",
    "d20176": "def machine_info():\n    import psutil\n    BYTES_IN_GIG = 1073741824.0\n    free_bytes = psutil.virtual_memory().total\n    return [{\"memory\": float(\"%.1f\" % (free_bytes / BYTES_IN_GIG)), \"cores\": multiprocessing.cpu_count(),\n             \"name\": socket.gethostname()}]",
    "d20177": "def indexes_equal(a: Index, b: Index) -> bool:\n    return str(a) == str(b)",
    "d20178": "def create_db(app, appbuilder):\n    from flask_appbuilder.models.sqla import Base\n    _appbuilder = import_application(app, appbuilder)\n    engine = _appbuilder.get_session.get_bind(mapper=None, clause=None)\n    Base.metadata.create_all(engine)\n    click.echo(click.style(\"DB objects created\", fg=\"green\"))",
    "d20179": "def cleanup():\n    if _output_dir and os.path.exists(_output_dir):\n        log.msg_warn(\"Cleaning up output directory at '{output_dir}' ...\"\n                     .format(output_dir=_output_dir))\n        if not _dry_run:\n            shutil.rmtree(_output_dir)",
    "d20180": "def debugTreePrint(node,pfx=\"->\"):\n  print pfx,node.item\n  for c in node.children:\n    debugTreePrint(c,\"  \"+pfx)",
    "d20181": "def urlencoded(body, charset='ascii', **kwargs):\n    return parse_query_string(text(body, charset=charset), False)",
    "d20182": "def each_img(dir_path):\n    for fname in os.listdir(dir_path):\n        if fname.endswith('.jpg') or fname.endswith('.png') or fname.endswith('.bmp'):\n            yield fname",
    "d20183": "def valid_date(x: str) -> bool:\n    try:\n        if x != dt.datetime.strptime(x, DATE_FORMAT).strftime(DATE_FORMAT):\n            raise ValueError\n        return True\n    except ValueError:\n        return False",
    "d20184": "def sbessely(x, N):\n    out = np.zeros(N, dtype=np.float64)\n    out[0] = -np.cos(x) / x\n    out[1] = -np.cos(x) / (x ** 2) - np.sin(x) / x\n    for n in xrange(2, N):\n        out[n] = ((2.0 * n - 1.0) / x) * out[n - 1] - out[n - 2]\n    return out",
    "d20185": "def _cnx_is_empty(in_file):\n    with open(in_file) as in_handle:\n        for i, line in enumerate(in_handle):\n            if i > 0:\n                return False\n    return True",
    "d20186": "def stop(self, timeout=None):\n        self.stopping = True\n        for process in list(self.processes):\n            self.stop_process(process, timeout=timeout)",
    "d20187": "def sanitize_word(s):\n    s = re.sub('[^\\w-]+', '_', s)\n    s = re.sub('__+', '_', s)\n    return s.strip('_')",
    "d20188": "def A(*a):\n    return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]",
    "d20189": "def __init__(self):\n        self.state = self.STATE_INITIALIZING\n        self.state_start = time.time()",
    "d20190": "def scan(client, query=None, scroll='5m', raise_on_error=True,\n         preserve_order=False, size=1000, **kwargs):\n    if not preserve_order:\n        kwargs['search_type'] = 'scan'\n    resp = client.search(body=query, scroll=scroll, size=size, **kwargs)\n    scroll_id = resp.get('_scroll_id')\n    if scroll_id is None:\n        return\n    first_run = True\n    while True:\n        if preserve_order and first_run:\n            first_run = False\n        else:\n            resp = client.scroll(scroll_id, scroll=scroll)\n        for hit in resp['hits']['hits']:\n            yield hit\n        if resp[\"_shards\"][\"failed\"]:\n            logger.warning(\n                'Scroll request has failed on %d shards out of %d.',\n                resp['_shards']['failed'], resp['_shards']['total']\n            )\n            if raise_on_error:\n                raise ScanError(\n                    'Scroll request has failed on %d shards out of %d.' %\n                    (resp['_shards']['failed'], resp['_shards']['total'])\n                )\n        scroll_id = resp.get('_scroll_id')\n        if scroll_id is None or not resp['hits']['hits']:\n            break",
    "d20191": "def __exit__(self, type, value, traceback):\n        if not self.asarfile:\n            return\n        self.asarfile.close()\n        self.asarfile = None",
    "d20192": "def attr_cache_clear(self):\n        node = extract_node(\"\"\"def cache_clear(self): pass\"\"\")\n        return BoundMethod(proxy=node, bound=self._instance.parent.scope())",
    "d20193": "def stop_at(iterable, idx):\n    for i, item in enumerate(iterable):\n        if i == idx: return\n        yield item",
    "d20194": "def date_to_datetime(x):\n    if not isinstance(x, datetime) and isinstance(x, date):\n        return datetime.combine(x, time())\n    return x",
    "d20195": "def accel_next(self, *args):\n        if self.get_notebook().get_current_page() + 1 == self.get_notebook().get_n_pages():\n            self.get_notebook().set_current_page(0)\n        else:\n            self.get_notebook().next_page()\n        return True",
    "d20196": "def clean_dataframe(df):\n    df = df.fillna(method='ffill')\n    df = df.fillna(0.0)\n    return df",
    "d20197": "def check_output(args, env=None, sp=subprocess):\n    log.debug('calling %s with env %s', args, env)\n    output = sp.check_output(args=args, env=env)\n    log.debug('output: %r', output)\n    return output",
    "d20198": "def cpp_prog_builder(build_context, target):\n    yprint(build_context.conf, 'Build CppProg', target)\n    workspace_dir = build_context.get_workspace('CppProg', target.name)\n    build_cpp(build_context, target, target.compiler_config, workspace_dir)",
    "d20199": "def to_bytes(self):\n\t\tchunks = [PNG_SIGN]\n\t\tchunks.extend(c[1] for c in self.chunks)\n\t\treturn b\"\".join(chunks)",
    "d20200": "def fetch_token(self, **kwargs):\n        return super(AsanaOAuth2Session, self).fetch_token(self.token_url, client_secret=self.client_secret, **kwargs)",
    "d20201": "def advance_one_line(self):\n    current_line = self._current_token.line_number\n    while current_line == self._current_token.line_number:\n      self._current_token = ConfigParser.Token(*next(self._token_generator))",
    "d20202": "def round_to_int(number, precision):\n    precision = int(precision)\n    rounded = (int(number) + precision / 2) // precision * precision\n    return rounded",
    "d20203": "def roll_dice():\n    sums = 0\n    while True:\n        roll = random.randint(1, 6)\n        sums += roll\n        if(input(\"Enter y or n to continue: \").upper()) == 'N':\n            print(sums)\n            break",
    "d20204": "def __add_namespaceinfo(self, ni):\n        self.__ns_uri_map[ni.uri] = ni\n        for prefix in ni.prefixes:\n            self.__prefix_map[prefix] = ni"
}